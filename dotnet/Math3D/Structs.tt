<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ output extension=".cs" #>
<#@ include file="TemplateHelpers.tt" #>  
// AUTOGENERATED FILE: Do not edit directly, instead edit Structs.tt
 
// MIT License 
// Copyright (C) 2019 Ara 3D. Inc
// https://ara3d.com
// This file is subject to the terms and conditions defined in   
// file 'LICENSE.txt', which is part of this source code package.  
// ReSharper disable CompareOfFloatsByEqualityOperator
  
using System;    
using System.Runtime.CompilerServices; 
using System.Runtime.InteropServices;

namespace Ara3D      
{
<# 
	CreateVectorStruct("Vector2", new[] { "X", "Y" }, "float");    
	CreateVectorStruct("Vector3", new[] { "X", "Y", "Z" }, "float");     
	CreateVectorStruct("Vector4", new[] { "X", "Y", "Z", "W", }, "float");     
	
	CreateVectorStruct("DVector2", new[] { "X", "Y" }, "double");    
	CreateVectorStruct("DVector3", new[] { "X", "Y", "Z" }, "double");    
	CreateVectorStruct("DVector4", new[] { "X", "Y", "Z", "W", }, "double");    

	CreateStruct("Plane", new[] { "Normal", "D" }, new[] { "Vector3", "float" });
	CreateStruct("DPlane", new[] { "Normal", "D" }, new[] { "DVector3", "double" });

	CreateStruct("Quaternion", new[] { "X", "Y", "Z", "W" }, new [] { "float", "float", "float", "float" });
	CreateStruct("DQuaternion", new[] { "X", "Y", "Z", "W" }, new [] { "double", "double", "double", "double" });

	// Various types of intervals (and bounding structs)  
	CreateRangeStruct("Interval", "float");
	CreateRangeStruct("Box2", "Vector2");    
	CreateRangeStruct("Box", "Vector3");     
	CreateRangeStruct("Box4", "Vector4"); 
	 
	CreateRangeStruct("DInterval", "double");   
	CreateRangeStruct("DBox2", "DVector2");     
	CreateRangeStruct("DBox3", "DVector3");    
	CreateRangeStruct("DBox4", "DVector4");  

	// These are common structs 
	CreateStruct("Ray", new[] { "Position", "Direction" }, new[] { "Vector3", "Vector3" });
	CreateStruct("DRay", new[] { "Position", "Direction" }, new[] { "DVector3", "DVector3" });
	CreateStruct("Sphere", new[] { "Center", "Radius" }, new[] { "Vector3", "float" }); 
	CreateStruct("DSphere", new[] { "Center", "Radius" }, new[] { "DVector3", "double" });
	
	// These have surface areas and midpoints and bounding boxes
	CreateShapeStruct("Line", new[] { "A", "B" }, "Vector3");    
	CreateShapeStruct("Triangle", new[] { "A", "B", "C" }, "Vector3");
	CreateShapeStruct("Triangle2", new[] { "A", "B", "C" }, "Vector2");
	CreateShapeStruct("Quad", new[] { "A", "B", "C", "D" }, "Vector3");

	// These are plain old vector types (they will need mathematical operators)
	CreateVectorStruct("Int2", new[] { "A", "B" }, "int");    
	CreateVectorStruct("Int3", new[] { "A", "B", "C" }, "int");    
	CreateVectorStruct("Int4", new[] { "A", "B", "C", "D" }, "int");

	// TODO: the double operators are not yet finished.
#>
}