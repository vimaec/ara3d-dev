  
// AUTOGENERATED FILE: Do not edit directly, instead edit Structs.tt
 
// MIT License 
// Copyright (C) 2019 Ara 3D. Inc
// https://ara3d.com
// This file is subject to the terms and conditions defined in   
// file 'LICENSE.txt', which is part of this source code package.  
// ReSharper disable CompareOfFloatsByEqualityOperator
  
using System;    
using System.Runtime.CompilerServices; 
using System.Runtime.InteropServices;

namespace Ara3D      
{
	[StructLayout(LayoutKind.Sequential, Pack=4)]
	public readonly partial struct Vector2 : IEquatable< Vector2 >
	{ 
		public readonly float X;
		public readonly float Y;
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public Vector2(float x, float y) { X = x; Y = y; }
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public override bool Equals(object obj) => obj is Vector2 x && Equals(x);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public override int GetHashCode() => Hash.Combine(X.GetHashCode(), Y.GetHashCode());
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public override string ToString() => $"Vector2(X = {X}, Y = {Y})";
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public bool Equals(Vector2 x) => X == x.X && Y == x.Y;
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static bool operator ==(Vector2 x0, Vector2 x1) => x0.Equals(x1);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static bool operator !=(Vector2 x0, Vector2 x1) => !x0.Equals(x1);
		public static Vector2 Zero = new Vector2(default, default);
		public static Vector2 MinValue = new Vector2(float.MinValue, float.MinValue);
		public static Vector2 MaxValue = new Vector2(float.MaxValue, float.MaxValue);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public Vector2 SetX(float x) => new Vector2(x, Y);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public Vector2 SetY(float x) => new Vector2(X, x);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static Vector2 operator +(Vector2 value1, Vector2 value2) => new Vector2(value1.X + value2.X,value1.Y + value2.Y);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static Vector2 operator +(Vector2 value1, float value2) => new Vector2(value1.X + value2,value1.Y + value2);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static Vector2 operator +(float value1, Vector2 value2) => new Vector2(value1 + value2.X,value1 + value2.Y);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static Vector2 operator -(Vector2 value1, Vector2 value2) => new Vector2(value1.X - value2.X,value1.Y - value2.Y);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static Vector2 operator -(Vector2 value1, float value2) => new Vector2(value1.X - value2,value1.Y - value2);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static Vector2 operator -(float value1, Vector2 value2) => new Vector2(value1 - value2.X,value1 - value2.Y);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static Vector2 operator *(Vector2 value1, Vector2 value2) => new Vector2(value1.X * value2.X,value1.Y * value2.Y);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static Vector2 operator *(Vector2 value1, float value2) => new Vector2(value1.X * value2,value1.Y * value2);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static Vector2 operator *(float value1, Vector2 value2) => new Vector2(value1 * value2.X,value1 * value2.Y);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static Vector2 operator /(Vector2 value1, Vector2 value2) => new Vector2(value1.X / value2.X,value1.Y / value2.Y);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static Vector2 operator /(Vector2 value1, float value2) => new Vector2(value1.X / value2,value1.Y / value2);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static Vector2 operator /(float value1, Vector2 value2) => new Vector2(value1 / value2.X,value1 / value2.Y);
		public static Vector2 One = new Vector2(1f);
		public static Vector2 UnitX = Zero.SetX(1f);
		public static Vector2 UnitY = Zero.SetY(1f);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public Vector2(float value) : this(value, value) { }		
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static Vector2 operator -(Vector2 value) => Zero - value;
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static float Dot(Vector2 value1, Vector2 value2) => value1.X * value2.X + value1.Y * value2.Y;
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public float Dot(Vector2 value) => Vector2.Dot(this, value);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public bool AlmostZero(float tolerance = Constants.Tolerance) => X.Abs() < tolerance && Y.Abs() < tolerance;	
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public bool AlmostEquals(Vector2 value, float tolerance = Constants.Tolerance) => (this - value).AlmostZero(tolerance);	
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public bool IsNaN() => X.IsNaN() || Y.IsNaN();
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public float MinComponent() => (X).Min(Y);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public float MaxComponent() => (X).Max(Y);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public float SumComponents() => (X) + (Y);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public float SumSqrComponents() => (X).Sqr() + (Y).Sqr();
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public float ProductComponents() => (X) * (Y);
	}
	[StructLayout(LayoutKind.Sequential, Pack=4)]
	public readonly partial struct Vector3 : IEquatable< Vector3 >
	{ 
		public readonly float X;
		public readonly float Y;
		public readonly float Z;
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public Vector3(float x, float y, float z) { X = x; Y = y; Z = z; }
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public override bool Equals(object obj) => obj is Vector3 x && Equals(x);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public override int GetHashCode() => Hash.Combine(X.GetHashCode(), Y.GetHashCode(), Z.GetHashCode());
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public override string ToString() => $"Vector3(X = {X}, Y = {Y}, Z = {Z})";
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public bool Equals(Vector3 x) => X == x.X && Y == x.Y && Z == x.Z;
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static bool operator ==(Vector3 x0, Vector3 x1) => x0.Equals(x1);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static bool operator !=(Vector3 x0, Vector3 x1) => !x0.Equals(x1);
		public static Vector3 Zero = new Vector3(default, default, default);
		public static Vector3 MinValue = new Vector3(float.MinValue, float.MinValue, float.MinValue);
		public static Vector3 MaxValue = new Vector3(float.MaxValue, float.MaxValue, float.MaxValue);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public Vector3 SetX(float x) => new Vector3(x, Y, Z);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public Vector3 SetY(float x) => new Vector3(X, x, Z);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public Vector3 SetZ(float x) => new Vector3(X, Y, x);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static Vector3 operator +(Vector3 value1, Vector3 value2) => new Vector3(value1.X + value2.X,value1.Y + value2.Y,value1.Z + value2.Z);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static Vector3 operator +(Vector3 value1, float value2) => new Vector3(value1.X + value2,value1.Y + value2,value1.Z + value2);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static Vector3 operator +(float value1, Vector3 value2) => new Vector3(value1 + value2.X,value1 + value2.Y,value1 + value2.Z);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static Vector3 operator -(Vector3 value1, Vector3 value2) => new Vector3(value1.X - value2.X,value1.Y - value2.Y,value1.Z - value2.Z);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static Vector3 operator -(Vector3 value1, float value2) => new Vector3(value1.X - value2,value1.Y - value2,value1.Z - value2);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static Vector3 operator -(float value1, Vector3 value2) => new Vector3(value1 - value2.X,value1 - value2.Y,value1 - value2.Z);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static Vector3 operator *(Vector3 value1, Vector3 value2) => new Vector3(value1.X * value2.X,value1.Y * value2.Y,value1.Z * value2.Z);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static Vector3 operator *(Vector3 value1, float value2) => new Vector3(value1.X * value2,value1.Y * value2,value1.Z * value2);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static Vector3 operator *(float value1, Vector3 value2) => new Vector3(value1 * value2.X,value1 * value2.Y,value1 * value2.Z);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static Vector3 operator /(Vector3 value1, Vector3 value2) => new Vector3(value1.X / value2.X,value1.Y / value2.Y,value1.Z / value2.Z);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static Vector3 operator /(Vector3 value1, float value2) => new Vector3(value1.X / value2,value1.Y / value2,value1.Z / value2);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static Vector3 operator /(float value1, Vector3 value2) => new Vector3(value1 / value2.X,value1 / value2.Y,value1 / value2.Z);
		public static Vector3 One = new Vector3(1f);
		public static Vector3 UnitX = Zero.SetX(1f);
		public static Vector3 UnitY = Zero.SetY(1f);
		public static Vector3 UnitZ = Zero.SetZ(1f);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public Vector3(float value) : this(value, value, value) { }		
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static Vector3 operator -(Vector3 value) => Zero - value;
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static float Dot(Vector3 value1, Vector3 value2) => value1.X * value2.X + value1.Y * value2.Y + value1.Z * value2.Z;
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public float Dot(Vector3 value) => Vector3.Dot(this, value);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public bool AlmostZero(float tolerance = Constants.Tolerance) => X.Abs() < tolerance && Y.Abs() < tolerance && Z.Abs() < tolerance;	
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public bool AlmostEquals(Vector3 value, float tolerance = Constants.Tolerance) => (this - value).AlmostZero(tolerance);	
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public bool IsNaN() => X.IsNaN() || Y.IsNaN() || Z.IsNaN();
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public float MinComponent() => (X).Min(Y).Min(Z);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public float MaxComponent() => (X).Max(Y).Max(Z);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public float SumComponents() => (X) + (Y) + (Z);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public float SumSqrComponents() => (X).Sqr() + (Y).Sqr() + (Z).Sqr();
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public float ProductComponents() => (X) * (Y) * (Z);
	}
	[StructLayout(LayoutKind.Sequential, Pack=4)]
	public readonly partial struct Vector4 : IEquatable< Vector4 >
	{ 
		public readonly float X;
		public readonly float Y;
		public readonly float Z;
		public readonly float W;
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public Vector4(float x, float y, float z, float w) { X = x; Y = y; Z = z; W = w; }
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public override bool Equals(object obj) => obj is Vector4 x && Equals(x);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public override int GetHashCode() => Hash.Combine(X.GetHashCode(), Y.GetHashCode(), Z.GetHashCode(), W.GetHashCode());
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public override string ToString() => $"Vector4(X = {X}, Y = {Y}, Z = {Z}, W = {W})";
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public bool Equals(Vector4 x) => X == x.X && Y == x.Y && Z == x.Z && W == x.W;
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static bool operator ==(Vector4 x0, Vector4 x1) => x0.Equals(x1);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static bool operator !=(Vector4 x0, Vector4 x1) => !x0.Equals(x1);
		public static Vector4 Zero = new Vector4(default, default, default, default);
		public static Vector4 MinValue = new Vector4(float.MinValue, float.MinValue, float.MinValue, float.MinValue);
		public static Vector4 MaxValue = new Vector4(float.MaxValue, float.MaxValue, float.MaxValue, float.MaxValue);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public Vector4 SetX(float x) => new Vector4(x, Y, Z, W);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public Vector4 SetY(float x) => new Vector4(X, x, Z, W);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public Vector4 SetZ(float x) => new Vector4(X, Y, x, W);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public Vector4 SetW(float x) => new Vector4(X, Y, Z, x);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static Vector4 operator +(Vector4 value1, Vector4 value2) => new Vector4(value1.X + value2.X,value1.Y + value2.Y,value1.Z + value2.Z,value1.W + value2.W);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static Vector4 operator +(Vector4 value1, float value2) => new Vector4(value1.X + value2,value1.Y + value2,value1.Z + value2,value1.W + value2);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static Vector4 operator +(float value1, Vector4 value2) => new Vector4(value1 + value2.X,value1 + value2.Y,value1 + value2.Z,value1 + value2.W);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static Vector4 operator -(Vector4 value1, Vector4 value2) => new Vector4(value1.X - value2.X,value1.Y - value2.Y,value1.Z - value2.Z,value1.W - value2.W);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static Vector4 operator -(Vector4 value1, float value2) => new Vector4(value1.X - value2,value1.Y - value2,value1.Z - value2,value1.W - value2);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static Vector4 operator -(float value1, Vector4 value2) => new Vector4(value1 - value2.X,value1 - value2.Y,value1 - value2.Z,value1 - value2.W);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static Vector4 operator *(Vector4 value1, Vector4 value2) => new Vector4(value1.X * value2.X,value1.Y * value2.Y,value1.Z * value2.Z,value1.W * value2.W);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static Vector4 operator *(Vector4 value1, float value2) => new Vector4(value1.X * value2,value1.Y * value2,value1.Z * value2,value1.W * value2);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static Vector4 operator *(float value1, Vector4 value2) => new Vector4(value1 * value2.X,value1 * value2.Y,value1 * value2.Z,value1 * value2.W);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static Vector4 operator /(Vector4 value1, Vector4 value2) => new Vector4(value1.X / value2.X,value1.Y / value2.Y,value1.Z / value2.Z,value1.W / value2.W);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static Vector4 operator /(Vector4 value1, float value2) => new Vector4(value1.X / value2,value1.Y / value2,value1.Z / value2,value1.W / value2);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static Vector4 operator /(float value1, Vector4 value2) => new Vector4(value1 / value2.X,value1 / value2.Y,value1 / value2.Z,value1 / value2.W);
		public static Vector4 One = new Vector4(1f);
		public static Vector4 UnitX = Zero.SetX(1f);
		public static Vector4 UnitY = Zero.SetY(1f);
		public static Vector4 UnitZ = Zero.SetZ(1f);
		public static Vector4 UnitW = Zero.SetW(1f);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public Vector4(float value) : this(value, value, value, value) { }		
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static Vector4 operator -(Vector4 value) => Zero - value;
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static float Dot(Vector4 value1, Vector4 value2) => value1.X * value2.X + value1.Y * value2.Y + value1.Z * value2.Z + value1.W * value2.W;
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public float Dot(Vector4 value) => Vector4.Dot(this, value);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public bool AlmostZero(float tolerance = Constants.Tolerance) => X.Abs() < tolerance && Y.Abs() < tolerance && Z.Abs() < tolerance && W.Abs() < tolerance;	
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public bool AlmostEquals(Vector4 value, float tolerance = Constants.Tolerance) => (this - value).AlmostZero(tolerance);	
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public bool IsNaN() => X.IsNaN() || Y.IsNaN() || Z.IsNaN() || W.IsNaN();
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public float MinComponent() => (X).Min(Y).Min(Z).Min(W);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public float MaxComponent() => (X).Max(Y).Max(Z).Max(W);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public float SumComponents() => (X) + (Y) + (Z) + (W);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public float SumSqrComponents() => (X).Sqr() + (Y).Sqr() + (Z).Sqr() + (W).Sqr();
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public float ProductComponents() => (X) * (Y) * (Z) * (W);
	}
	[StructLayout(LayoutKind.Sequential, Pack=4)]
	public readonly partial struct DVector2 : IEquatable< DVector2 >
	{ 
		public readonly double X;
		public readonly double Y;
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public DVector2(double x, double y) { X = x; Y = y; }
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public override bool Equals(object obj) => obj is DVector2 x && Equals(x);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public override int GetHashCode() => Hash.Combine(X.GetHashCode(), Y.GetHashCode());
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public override string ToString() => $"DVector2(X = {X}, Y = {Y})";
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public bool Equals(DVector2 x) => X == x.X && Y == x.Y;
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static bool operator ==(DVector2 x0, DVector2 x1) => x0.Equals(x1);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static bool operator !=(DVector2 x0, DVector2 x1) => !x0.Equals(x1);
		public static DVector2 Zero = new DVector2(default, default);
		public static DVector2 MinValue = new DVector2(double.MinValue, double.MinValue);
		public static DVector2 MaxValue = new DVector2(double.MaxValue, double.MaxValue);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public DVector2 SetX(double x) => new DVector2(x, Y);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public DVector2 SetY(double x) => new DVector2(X, x);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static DVector2 operator +(DVector2 value1, DVector2 value2) => new DVector2(value1.X + value2.X,value1.Y + value2.Y);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static DVector2 operator +(DVector2 value1, double value2) => new DVector2(value1.X + value2,value1.Y + value2);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static DVector2 operator +(double value1, DVector2 value2) => new DVector2(value1 + value2.X,value1 + value2.Y);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static DVector2 operator -(DVector2 value1, DVector2 value2) => new DVector2(value1.X - value2.X,value1.Y - value2.Y);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static DVector2 operator -(DVector2 value1, double value2) => new DVector2(value1.X - value2,value1.Y - value2);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static DVector2 operator -(double value1, DVector2 value2) => new DVector2(value1 - value2.X,value1 - value2.Y);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static DVector2 operator *(DVector2 value1, DVector2 value2) => new DVector2(value1.X * value2.X,value1.Y * value2.Y);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static DVector2 operator *(DVector2 value1, double value2) => new DVector2(value1.X * value2,value1.Y * value2);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static DVector2 operator *(double value1, DVector2 value2) => new DVector2(value1 * value2.X,value1 * value2.Y);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static DVector2 operator /(DVector2 value1, DVector2 value2) => new DVector2(value1.X / value2.X,value1.Y / value2.Y);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static DVector2 operator /(DVector2 value1, double value2) => new DVector2(value1.X / value2,value1.Y / value2);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static DVector2 operator /(double value1, DVector2 value2) => new DVector2(value1 / value2.X,value1 / value2.Y);
		public static DVector2 One = new DVector2(1.0);
		public static DVector2 UnitX = Zero.SetX(1.0);
		public static DVector2 UnitY = Zero.SetY(1.0);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public DVector2(double value) : this(value, value) { }		
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static DVector2 operator -(DVector2 value) => Zero - value;
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static double Dot(DVector2 value1, DVector2 value2) => value1.X * value2.X + value1.Y * value2.Y;
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public double Dot(DVector2 value) => DVector2.Dot(this, value);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public bool AlmostZero(float tolerance = Constants.Tolerance) => X.Abs() < tolerance && Y.Abs() < tolerance;	
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public bool AlmostEquals(DVector2 value, float tolerance = Constants.Tolerance) => (this - value).AlmostZero(tolerance);	
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public bool IsNaN() => X.IsNaN() || Y.IsNaN();
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public double MinComponent() => (X).Min(Y);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public double MaxComponent() => (X).Max(Y);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public double SumComponents() => (X) + (Y);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public double SumSqrComponents() => (X).Sqr() + (Y).Sqr();
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public double ProductComponents() => (X) * (Y);
	}
	[StructLayout(LayoutKind.Sequential, Pack=4)]
	public readonly partial struct DVector3 : IEquatable< DVector3 >
	{ 
		public readonly double X;
		public readonly double Y;
		public readonly double Z;
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public DVector3(double x, double y, double z) { X = x; Y = y; Z = z; }
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public override bool Equals(object obj) => obj is DVector3 x && Equals(x);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public override int GetHashCode() => Hash.Combine(X.GetHashCode(), Y.GetHashCode(), Z.GetHashCode());
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public override string ToString() => $"DVector3(X = {X}, Y = {Y}, Z = {Z})";
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public bool Equals(DVector3 x) => X == x.X && Y == x.Y && Z == x.Z;
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static bool operator ==(DVector3 x0, DVector3 x1) => x0.Equals(x1);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static bool operator !=(DVector3 x0, DVector3 x1) => !x0.Equals(x1);
		public static DVector3 Zero = new DVector3(default, default, default);
		public static DVector3 MinValue = new DVector3(double.MinValue, double.MinValue, double.MinValue);
		public static DVector3 MaxValue = new DVector3(double.MaxValue, double.MaxValue, double.MaxValue);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public DVector3 SetX(double x) => new DVector3(x, Y, Z);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public DVector3 SetY(double x) => new DVector3(X, x, Z);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public DVector3 SetZ(double x) => new DVector3(X, Y, x);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static DVector3 operator +(DVector3 value1, DVector3 value2) => new DVector3(value1.X + value2.X,value1.Y + value2.Y,value1.Z + value2.Z);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static DVector3 operator +(DVector3 value1, double value2) => new DVector3(value1.X + value2,value1.Y + value2,value1.Z + value2);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static DVector3 operator +(double value1, DVector3 value2) => new DVector3(value1 + value2.X,value1 + value2.Y,value1 + value2.Z);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static DVector3 operator -(DVector3 value1, DVector3 value2) => new DVector3(value1.X - value2.X,value1.Y - value2.Y,value1.Z - value2.Z);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static DVector3 operator -(DVector3 value1, double value2) => new DVector3(value1.X - value2,value1.Y - value2,value1.Z - value2);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static DVector3 operator -(double value1, DVector3 value2) => new DVector3(value1 - value2.X,value1 - value2.Y,value1 - value2.Z);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static DVector3 operator *(DVector3 value1, DVector3 value2) => new DVector3(value1.X * value2.X,value1.Y * value2.Y,value1.Z * value2.Z);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static DVector3 operator *(DVector3 value1, double value2) => new DVector3(value1.X * value2,value1.Y * value2,value1.Z * value2);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static DVector3 operator *(double value1, DVector3 value2) => new DVector3(value1 * value2.X,value1 * value2.Y,value1 * value2.Z);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static DVector3 operator /(DVector3 value1, DVector3 value2) => new DVector3(value1.X / value2.X,value1.Y / value2.Y,value1.Z / value2.Z);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static DVector3 operator /(DVector3 value1, double value2) => new DVector3(value1.X / value2,value1.Y / value2,value1.Z / value2);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static DVector3 operator /(double value1, DVector3 value2) => new DVector3(value1 / value2.X,value1 / value2.Y,value1 / value2.Z);
		public static DVector3 One = new DVector3(1.0);
		public static DVector3 UnitX = Zero.SetX(1.0);
		public static DVector3 UnitY = Zero.SetY(1.0);
		public static DVector3 UnitZ = Zero.SetZ(1.0);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public DVector3(double value) : this(value, value, value) { }		
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static DVector3 operator -(DVector3 value) => Zero - value;
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static double Dot(DVector3 value1, DVector3 value2) => value1.X * value2.X + value1.Y * value2.Y + value1.Z * value2.Z;
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public double Dot(DVector3 value) => DVector3.Dot(this, value);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public bool AlmostZero(float tolerance = Constants.Tolerance) => X.Abs() < tolerance && Y.Abs() < tolerance && Z.Abs() < tolerance;	
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public bool AlmostEquals(DVector3 value, float tolerance = Constants.Tolerance) => (this - value).AlmostZero(tolerance);	
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public bool IsNaN() => X.IsNaN() || Y.IsNaN() || Z.IsNaN();
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public double MinComponent() => (X).Min(Y).Min(Z);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public double MaxComponent() => (X).Max(Y).Max(Z);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public double SumComponents() => (X) + (Y) + (Z);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public double SumSqrComponents() => (X).Sqr() + (Y).Sqr() + (Z).Sqr();
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public double ProductComponents() => (X) * (Y) * (Z);
	}
	[StructLayout(LayoutKind.Sequential, Pack=4)]
	public readonly partial struct DVector4 : IEquatable< DVector4 >
	{ 
		public readonly double X;
		public readonly double Y;
		public readonly double Z;
		public readonly double W;
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public DVector4(double x, double y, double z, double w) { X = x; Y = y; Z = z; W = w; }
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public override bool Equals(object obj) => obj is DVector4 x && Equals(x);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public override int GetHashCode() => Hash.Combine(X.GetHashCode(), Y.GetHashCode(), Z.GetHashCode(), W.GetHashCode());
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public override string ToString() => $"DVector4(X = {X}, Y = {Y}, Z = {Z}, W = {W})";
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public bool Equals(DVector4 x) => X == x.X && Y == x.Y && Z == x.Z && W == x.W;
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static bool operator ==(DVector4 x0, DVector4 x1) => x0.Equals(x1);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static bool operator !=(DVector4 x0, DVector4 x1) => !x0.Equals(x1);
		public static DVector4 Zero = new DVector4(default, default, default, default);
		public static DVector4 MinValue = new DVector4(double.MinValue, double.MinValue, double.MinValue, double.MinValue);
		public static DVector4 MaxValue = new DVector4(double.MaxValue, double.MaxValue, double.MaxValue, double.MaxValue);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public DVector4 SetX(double x) => new DVector4(x, Y, Z, W);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public DVector4 SetY(double x) => new DVector4(X, x, Z, W);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public DVector4 SetZ(double x) => new DVector4(X, Y, x, W);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public DVector4 SetW(double x) => new DVector4(X, Y, Z, x);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static DVector4 operator +(DVector4 value1, DVector4 value2) => new DVector4(value1.X + value2.X,value1.Y + value2.Y,value1.Z + value2.Z,value1.W + value2.W);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static DVector4 operator +(DVector4 value1, double value2) => new DVector4(value1.X + value2,value1.Y + value2,value1.Z + value2,value1.W + value2);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static DVector4 operator +(double value1, DVector4 value2) => new DVector4(value1 + value2.X,value1 + value2.Y,value1 + value2.Z,value1 + value2.W);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static DVector4 operator -(DVector4 value1, DVector4 value2) => new DVector4(value1.X - value2.X,value1.Y - value2.Y,value1.Z - value2.Z,value1.W - value2.W);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static DVector4 operator -(DVector4 value1, double value2) => new DVector4(value1.X - value2,value1.Y - value2,value1.Z - value2,value1.W - value2);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static DVector4 operator -(double value1, DVector4 value2) => new DVector4(value1 - value2.X,value1 - value2.Y,value1 - value2.Z,value1 - value2.W);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static DVector4 operator *(DVector4 value1, DVector4 value2) => new DVector4(value1.X * value2.X,value1.Y * value2.Y,value1.Z * value2.Z,value1.W * value2.W);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static DVector4 operator *(DVector4 value1, double value2) => new DVector4(value1.X * value2,value1.Y * value2,value1.Z * value2,value1.W * value2);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static DVector4 operator *(double value1, DVector4 value2) => new DVector4(value1 * value2.X,value1 * value2.Y,value1 * value2.Z,value1 * value2.W);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static DVector4 operator /(DVector4 value1, DVector4 value2) => new DVector4(value1.X / value2.X,value1.Y / value2.Y,value1.Z / value2.Z,value1.W / value2.W);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static DVector4 operator /(DVector4 value1, double value2) => new DVector4(value1.X / value2,value1.Y / value2,value1.Z / value2,value1.W / value2);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static DVector4 operator /(double value1, DVector4 value2) => new DVector4(value1 / value2.X,value1 / value2.Y,value1 / value2.Z,value1 / value2.W);
		public static DVector4 One = new DVector4(1.0);
		public static DVector4 UnitX = Zero.SetX(1.0);
		public static DVector4 UnitY = Zero.SetY(1.0);
		public static DVector4 UnitZ = Zero.SetZ(1.0);
		public static DVector4 UnitW = Zero.SetW(1.0);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public DVector4(double value) : this(value, value, value, value) { }		
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static DVector4 operator -(DVector4 value) => Zero - value;
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static double Dot(DVector4 value1, DVector4 value2) => value1.X * value2.X + value1.Y * value2.Y + value1.Z * value2.Z + value1.W * value2.W;
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public double Dot(DVector4 value) => DVector4.Dot(this, value);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public bool AlmostZero(float tolerance = Constants.Tolerance) => X.Abs() < tolerance && Y.Abs() < tolerance && Z.Abs() < tolerance && W.Abs() < tolerance;	
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public bool AlmostEquals(DVector4 value, float tolerance = Constants.Tolerance) => (this - value).AlmostZero(tolerance);	
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public bool IsNaN() => X.IsNaN() || Y.IsNaN() || Z.IsNaN() || W.IsNaN();
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public double MinComponent() => (X).Min(Y).Min(Z).Min(W);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public double MaxComponent() => (X).Max(Y).Max(Z).Max(W);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public double SumComponents() => (X) + (Y) + (Z) + (W);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public double SumSqrComponents() => (X).Sqr() + (Y).Sqr() + (Z).Sqr() + (W).Sqr();
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public double ProductComponents() => (X) * (Y) * (Z) * (W);
	}
	[StructLayout(LayoutKind.Sequential, Pack=4)]
	public readonly partial struct Plane : IEquatable< Plane >
	{ 
		public readonly Vector3 Normal;
		public readonly float D;
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public Plane(Vector3 normal, float d) { Normal = normal; D = d; }
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public override bool Equals(object obj) => obj is Plane x && Equals(x);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public override int GetHashCode() => Hash.Combine(Normal.GetHashCode(), D.GetHashCode());
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public override string ToString() => $"Plane(Normal = {Normal}, D = {D})";
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public bool Equals(Plane x) => Normal == x.Normal && D == x.D;
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static bool operator ==(Plane x0, Plane x1) => x0.Equals(x1);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static bool operator !=(Plane x0, Plane x1) => !x0.Equals(x1);
		public static Plane Zero = new Plane(default, default);
		public static Plane MinValue = new Plane(Vector3.MinValue, float.MinValue);
		public static Plane MaxValue = new Plane(Vector3.MaxValue, float.MaxValue);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public Plane SetNormal(Vector3 x) => new Plane(x, D);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public Plane SetD(float x) => new Plane(Normal, x);
	}
	[StructLayout(LayoutKind.Sequential, Pack=4)]
	public readonly partial struct DPlane : IEquatable< DPlane >
	{ 
		public readonly DVector3 Normal;
		public readonly double D;
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public DPlane(DVector3 normal, double d) { Normal = normal; D = d; }
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public override bool Equals(object obj) => obj is DPlane x && Equals(x);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public override int GetHashCode() => Hash.Combine(Normal.GetHashCode(), D.GetHashCode());
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public override string ToString() => $"DPlane(Normal = {Normal}, D = {D})";
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public bool Equals(DPlane x) => Normal == x.Normal && D == x.D;
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static bool operator ==(DPlane x0, DPlane x1) => x0.Equals(x1);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static bool operator !=(DPlane x0, DPlane x1) => !x0.Equals(x1);
		public static DPlane Zero = new DPlane(default, default);
		public static DPlane MinValue = new DPlane(DVector3.MinValue, double.MinValue);
		public static DPlane MaxValue = new DPlane(DVector3.MaxValue, double.MaxValue);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public DPlane SetNormal(DVector3 x) => new DPlane(x, D);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public DPlane SetD(double x) => new DPlane(Normal, x);
	}
	[StructLayout(LayoutKind.Sequential, Pack=4)]
	public readonly partial struct Quaternion : IEquatable< Quaternion >
	{ 
		public readonly float X;
		public readonly float Y;
		public readonly float Z;
		public readonly float W;
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public Quaternion(float x, float y, float z, float w) { X = x; Y = y; Z = z; W = w; }
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public override bool Equals(object obj) => obj is Quaternion x && Equals(x);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public override int GetHashCode() => Hash.Combine(X.GetHashCode(), Y.GetHashCode(), Z.GetHashCode(), W.GetHashCode());
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public override string ToString() => $"Quaternion(X = {X}, Y = {Y}, Z = {Z}, W = {W})";
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public bool Equals(Quaternion x) => X == x.X && Y == x.Y && Z == x.Z && W == x.W;
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static bool operator ==(Quaternion x0, Quaternion x1) => x0.Equals(x1);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static bool operator !=(Quaternion x0, Quaternion x1) => !x0.Equals(x1);
		public static Quaternion Zero = new Quaternion(default, default, default, default);
		public static Quaternion MinValue = new Quaternion(float.MinValue, float.MinValue, float.MinValue, float.MinValue);
		public static Quaternion MaxValue = new Quaternion(float.MaxValue, float.MaxValue, float.MaxValue, float.MaxValue);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public Quaternion SetX(float x) => new Quaternion(x, Y, Z, W);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public Quaternion SetY(float x) => new Quaternion(X, x, Z, W);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public Quaternion SetZ(float x) => new Quaternion(X, Y, x, W);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public Quaternion SetW(float x) => new Quaternion(X, Y, Z, x);
	}
	[StructLayout(LayoutKind.Sequential, Pack=4)]
	public readonly partial struct DQuaternion : IEquatable< DQuaternion >
	{ 
		public readonly double X;
		public readonly double Y;
		public readonly double Z;
		public readonly double W;
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public DQuaternion(double x, double y, double z, double w) { X = x; Y = y; Z = z; W = w; }
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public override bool Equals(object obj) => obj is DQuaternion x && Equals(x);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public override int GetHashCode() => Hash.Combine(X.GetHashCode(), Y.GetHashCode(), Z.GetHashCode(), W.GetHashCode());
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public override string ToString() => $"DQuaternion(X = {X}, Y = {Y}, Z = {Z}, W = {W})";
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public bool Equals(DQuaternion x) => X == x.X && Y == x.Y && Z == x.Z && W == x.W;
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static bool operator ==(DQuaternion x0, DQuaternion x1) => x0.Equals(x1);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static bool operator !=(DQuaternion x0, DQuaternion x1) => !x0.Equals(x1);
		public static DQuaternion Zero = new DQuaternion(default, default, default, default);
		public static DQuaternion MinValue = new DQuaternion(double.MinValue, double.MinValue, double.MinValue, double.MinValue);
		public static DQuaternion MaxValue = new DQuaternion(double.MaxValue, double.MaxValue, double.MaxValue, double.MaxValue);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public DQuaternion SetX(double x) => new DQuaternion(x, Y, Z, W);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public DQuaternion SetY(double x) => new DQuaternion(X, x, Z, W);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public DQuaternion SetZ(double x) => new DQuaternion(X, Y, x, W);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public DQuaternion SetW(double x) => new DQuaternion(X, Y, Z, x);
	}
	[StructLayout(LayoutKind.Sequential, Pack=4)]
	public readonly partial struct Interval : IEquatable< Interval >
	{ 
		public readonly float Min;
		public readonly float Max;
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public Interval(float min, float max) { Min = min; Max = max; }
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public override bool Equals(object obj) => obj is Interval x && Equals(x);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public override int GetHashCode() => Hash.Combine(Min.GetHashCode(), Max.GetHashCode());
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public override string ToString() => $"Interval(Min = {Min}, Max = {Max})";
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public bool Equals(Interval x) => Min == x.Min && Max == x.Max;
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static bool operator ==(Interval x0, Interval x1) => x0.Equals(x1);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static bool operator !=(Interval x0, Interval x1) => !x0.Equals(x1);
		public static Interval Zero = new Interval(default, default);
		public static Interval MinValue = new Interval(float.MinValue, float.MinValue);
		public static Interval MaxValue = new Interval(float.MaxValue, float.MaxValue);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public Interval SetMin(float x) => new Interval(x, Max);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public Interval SetMax(float x) => new Interval(Min, x);
	}
	[StructLayout(LayoutKind.Sequential, Pack=4)]
	public readonly partial struct Box2 : IEquatable< Box2 >
	{ 
		public readonly Vector2 Min;
		public readonly Vector2 Max;
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public Box2(Vector2 min, Vector2 max) { Min = min; Max = max; }
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public override bool Equals(object obj) => obj is Box2 x && Equals(x);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public override int GetHashCode() => Hash.Combine(Min.GetHashCode(), Max.GetHashCode());
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public override string ToString() => $"Box2(Min = {Min}, Max = {Max})";
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public bool Equals(Box2 x) => Min == x.Min && Max == x.Max;
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static bool operator ==(Box2 x0, Box2 x1) => x0.Equals(x1);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static bool operator !=(Box2 x0, Box2 x1) => !x0.Equals(x1);
		public static Box2 Zero = new Box2(default, default);
		public static Box2 MinValue = new Box2(Vector2.MinValue, Vector2.MinValue);
		public static Box2 MaxValue = new Box2(Vector2.MaxValue, Vector2.MaxValue);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public Box2 SetMin(Vector2 x) => new Box2(x, Max);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public Box2 SetMax(Vector2 x) => new Box2(Min, x);
	}
	[StructLayout(LayoutKind.Sequential, Pack=4)]
	public readonly partial struct Box : IEquatable< Box >
	{ 
		public readonly Vector3 Min;
		public readonly Vector3 Max;
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public Box(Vector3 min, Vector3 max) { Min = min; Max = max; }
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public override bool Equals(object obj) => obj is Box x && Equals(x);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public override int GetHashCode() => Hash.Combine(Min.GetHashCode(), Max.GetHashCode());
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public override string ToString() => $"Box(Min = {Min}, Max = {Max})";
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public bool Equals(Box x) => Min == x.Min && Max == x.Max;
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static bool operator ==(Box x0, Box x1) => x0.Equals(x1);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static bool operator !=(Box x0, Box x1) => !x0.Equals(x1);
		public static Box Zero = new Box(default, default);
		public static Box MinValue = new Box(Vector3.MinValue, Vector3.MinValue);
		public static Box MaxValue = new Box(Vector3.MaxValue, Vector3.MaxValue);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public Box SetMin(Vector3 x) => new Box(x, Max);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public Box SetMax(Vector3 x) => new Box(Min, x);
	}
	[StructLayout(LayoutKind.Sequential, Pack=4)]
	public readonly partial struct Box4 : IEquatable< Box4 >
	{ 
		public readonly Vector4 Min;
		public readonly Vector4 Max;
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public Box4(Vector4 min, Vector4 max) { Min = min; Max = max; }
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public override bool Equals(object obj) => obj is Box4 x && Equals(x);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public override int GetHashCode() => Hash.Combine(Min.GetHashCode(), Max.GetHashCode());
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public override string ToString() => $"Box4(Min = {Min}, Max = {Max})";
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public bool Equals(Box4 x) => Min == x.Min && Max == x.Max;
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static bool operator ==(Box4 x0, Box4 x1) => x0.Equals(x1);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static bool operator !=(Box4 x0, Box4 x1) => !x0.Equals(x1);
		public static Box4 Zero = new Box4(default, default);
		public static Box4 MinValue = new Box4(Vector4.MinValue, Vector4.MinValue);
		public static Box4 MaxValue = new Box4(Vector4.MaxValue, Vector4.MaxValue);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public Box4 SetMin(Vector4 x) => new Box4(x, Max);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public Box4 SetMax(Vector4 x) => new Box4(Min, x);
	}
	[StructLayout(LayoutKind.Sequential, Pack=4)]
	public readonly partial struct DInterval : IEquatable< DInterval >
	{ 
		public readonly double Min;
		public readonly double Max;
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public DInterval(double min, double max) { Min = min; Max = max; }
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public override bool Equals(object obj) => obj is DInterval x && Equals(x);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public override int GetHashCode() => Hash.Combine(Min.GetHashCode(), Max.GetHashCode());
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public override string ToString() => $"DInterval(Min = {Min}, Max = {Max})";
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public bool Equals(DInterval x) => Min == x.Min && Max == x.Max;
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static bool operator ==(DInterval x0, DInterval x1) => x0.Equals(x1);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static bool operator !=(DInterval x0, DInterval x1) => !x0.Equals(x1);
		public static DInterval Zero = new DInterval(default, default);
		public static DInterval MinValue = new DInterval(double.MinValue, double.MinValue);
		public static DInterval MaxValue = new DInterval(double.MaxValue, double.MaxValue);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public DInterval SetMin(double x) => new DInterval(x, Max);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public DInterval SetMax(double x) => new DInterval(Min, x);
	}
	[StructLayout(LayoutKind.Sequential, Pack=4)]
	public readonly partial struct DBox2 : IEquatable< DBox2 >
	{ 
		public readonly DVector2 Min;
		public readonly DVector2 Max;
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public DBox2(DVector2 min, DVector2 max) { Min = min; Max = max; }
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public override bool Equals(object obj) => obj is DBox2 x && Equals(x);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public override int GetHashCode() => Hash.Combine(Min.GetHashCode(), Max.GetHashCode());
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public override string ToString() => $"DBox2(Min = {Min}, Max = {Max})";
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public bool Equals(DBox2 x) => Min == x.Min && Max == x.Max;
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static bool operator ==(DBox2 x0, DBox2 x1) => x0.Equals(x1);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static bool operator !=(DBox2 x0, DBox2 x1) => !x0.Equals(x1);
		public static DBox2 Zero = new DBox2(default, default);
		public static DBox2 MinValue = new DBox2(DVector2.MinValue, DVector2.MinValue);
		public static DBox2 MaxValue = new DBox2(DVector2.MaxValue, DVector2.MaxValue);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public DBox2 SetMin(DVector2 x) => new DBox2(x, Max);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public DBox2 SetMax(DVector2 x) => new DBox2(Min, x);
	}
	[StructLayout(LayoutKind.Sequential, Pack=4)]
	public readonly partial struct DBox3 : IEquatable< DBox3 >
	{ 
		public readonly DVector3 Min;
		public readonly DVector3 Max;
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public DBox3(DVector3 min, DVector3 max) { Min = min; Max = max; }
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public override bool Equals(object obj) => obj is DBox3 x && Equals(x);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public override int GetHashCode() => Hash.Combine(Min.GetHashCode(), Max.GetHashCode());
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public override string ToString() => $"DBox3(Min = {Min}, Max = {Max})";
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public bool Equals(DBox3 x) => Min == x.Min && Max == x.Max;
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static bool operator ==(DBox3 x0, DBox3 x1) => x0.Equals(x1);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static bool operator !=(DBox3 x0, DBox3 x1) => !x0.Equals(x1);
		public static DBox3 Zero = new DBox3(default, default);
		public static DBox3 MinValue = new DBox3(DVector3.MinValue, DVector3.MinValue);
		public static DBox3 MaxValue = new DBox3(DVector3.MaxValue, DVector3.MaxValue);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public DBox3 SetMin(DVector3 x) => new DBox3(x, Max);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public DBox3 SetMax(DVector3 x) => new DBox3(Min, x);
	}
	[StructLayout(LayoutKind.Sequential, Pack=4)]
	public readonly partial struct DBox4 : IEquatable< DBox4 >
	{ 
		public readonly DVector4 Min;
		public readonly DVector4 Max;
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public DBox4(DVector4 min, DVector4 max) { Min = min; Max = max; }
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public override bool Equals(object obj) => obj is DBox4 x && Equals(x);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public override int GetHashCode() => Hash.Combine(Min.GetHashCode(), Max.GetHashCode());
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public override string ToString() => $"DBox4(Min = {Min}, Max = {Max})";
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public bool Equals(DBox4 x) => Min == x.Min && Max == x.Max;
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static bool operator ==(DBox4 x0, DBox4 x1) => x0.Equals(x1);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static bool operator !=(DBox4 x0, DBox4 x1) => !x0.Equals(x1);
		public static DBox4 Zero = new DBox4(default, default);
		public static DBox4 MinValue = new DBox4(DVector4.MinValue, DVector4.MinValue);
		public static DBox4 MaxValue = new DBox4(DVector4.MaxValue, DVector4.MaxValue);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public DBox4 SetMin(DVector4 x) => new DBox4(x, Max);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public DBox4 SetMax(DVector4 x) => new DBox4(Min, x);
	}
	[StructLayout(LayoutKind.Sequential, Pack=4)]
	public readonly partial struct Ray : IEquatable< Ray >
	{ 
		public readonly Vector3 Position;
		public readonly Vector3 Direction;
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public Ray(Vector3 position, Vector3 direction) { Position = position; Direction = direction; }
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public override bool Equals(object obj) => obj is Ray x && Equals(x);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public override int GetHashCode() => Hash.Combine(Position.GetHashCode(), Direction.GetHashCode());
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public override string ToString() => $"Ray(Position = {Position}, Direction = {Direction})";
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public bool Equals(Ray x) => Position == x.Position && Direction == x.Direction;
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static bool operator ==(Ray x0, Ray x1) => x0.Equals(x1);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static bool operator !=(Ray x0, Ray x1) => !x0.Equals(x1);
		public static Ray Zero = new Ray(default, default);
		public static Ray MinValue = new Ray(Vector3.MinValue, Vector3.MinValue);
		public static Ray MaxValue = new Ray(Vector3.MaxValue, Vector3.MaxValue);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public Ray SetPosition(Vector3 x) => new Ray(x, Direction);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public Ray SetDirection(Vector3 x) => new Ray(Position, x);
	}
	[StructLayout(LayoutKind.Sequential, Pack=4)]
	public readonly partial struct DRay : IEquatable< DRay >
	{ 
		public readonly DVector3 Position;
		public readonly DVector3 Direction;
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public DRay(DVector3 position, DVector3 direction) { Position = position; Direction = direction; }
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public override bool Equals(object obj) => obj is DRay x && Equals(x);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public override int GetHashCode() => Hash.Combine(Position.GetHashCode(), Direction.GetHashCode());
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public override string ToString() => $"DRay(Position = {Position}, Direction = {Direction})";
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public bool Equals(DRay x) => Position == x.Position && Direction == x.Direction;
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static bool operator ==(DRay x0, DRay x1) => x0.Equals(x1);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static bool operator !=(DRay x0, DRay x1) => !x0.Equals(x1);
		public static DRay Zero = new DRay(default, default);
		public static DRay MinValue = new DRay(DVector3.MinValue, DVector3.MinValue);
		public static DRay MaxValue = new DRay(DVector3.MaxValue, DVector3.MaxValue);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public DRay SetPosition(DVector3 x) => new DRay(x, Direction);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public DRay SetDirection(DVector3 x) => new DRay(Position, x);
	}
	[StructLayout(LayoutKind.Sequential, Pack=4)]
	public readonly partial struct Sphere : IEquatable< Sphere >
	{ 
		public readonly Vector3 Center;
		public readonly float Radius;
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public Sphere(Vector3 center, float radius) { Center = center; Radius = radius; }
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public override bool Equals(object obj) => obj is Sphere x && Equals(x);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public override int GetHashCode() => Hash.Combine(Center.GetHashCode(), Radius.GetHashCode());
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public override string ToString() => $"Sphere(Center = {Center}, Radius = {Radius})";
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public bool Equals(Sphere x) => Center == x.Center && Radius == x.Radius;
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static bool operator ==(Sphere x0, Sphere x1) => x0.Equals(x1);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static bool operator !=(Sphere x0, Sphere x1) => !x0.Equals(x1);
		public static Sphere Zero = new Sphere(default, default);
		public static Sphere MinValue = new Sphere(Vector3.MinValue, float.MinValue);
		public static Sphere MaxValue = new Sphere(Vector3.MaxValue, float.MaxValue);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public Sphere SetCenter(Vector3 x) => new Sphere(x, Radius);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public Sphere SetRadius(float x) => new Sphere(Center, x);
	}
	[StructLayout(LayoutKind.Sequential, Pack=4)]
	public readonly partial struct DSphere : IEquatable< DSphere >
	{ 
		public readonly DVector3 Center;
		public readonly double Radius;
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public DSphere(DVector3 center, double radius) { Center = center; Radius = radius; }
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public override bool Equals(object obj) => obj is DSphere x && Equals(x);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public override int GetHashCode() => Hash.Combine(Center.GetHashCode(), Radius.GetHashCode());
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public override string ToString() => $"DSphere(Center = {Center}, Radius = {Radius})";
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public bool Equals(DSphere x) => Center == x.Center && Radius == x.Radius;
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static bool operator ==(DSphere x0, DSphere x1) => x0.Equals(x1);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static bool operator !=(DSphere x0, DSphere x1) => !x0.Equals(x1);
		public static DSphere Zero = new DSphere(default, default);
		public static DSphere MinValue = new DSphere(DVector3.MinValue, double.MinValue);
		public static DSphere MaxValue = new DSphere(DVector3.MaxValue, double.MaxValue);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public DSphere SetCenter(DVector3 x) => new DSphere(x, Radius);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public DSphere SetRadius(double x) => new DSphere(Center, x);
	}
	[StructLayout(LayoutKind.Sequential, Pack=4)]
	public readonly partial struct Line : IEquatable< Line >
	{ 
		public readonly Vector3 A;
		public readonly Vector3 B;
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public Line(Vector3 a, Vector3 b) { A = a; B = b; }
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public override bool Equals(object obj) => obj is Line x && Equals(x);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public override int GetHashCode() => Hash.Combine(A.GetHashCode(), B.GetHashCode());
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public override string ToString() => $"Line(A = {A}, B = {B})";
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public bool Equals(Line x) => A == x.A && B == x.B;
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static bool operator ==(Line x0, Line x1) => x0.Equals(x1);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static bool operator !=(Line x0, Line x1) => !x0.Equals(x1);
		public static Line Zero = new Line(default, default);
		public static Line MinValue = new Line(Vector3.MinValue, Vector3.MinValue);
		public static Line MaxValue = new Line(Vector3.MaxValue, Vector3.MaxValue);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public Line SetA(Vector3 x) => new Line(x, B);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public Line SetB(Vector3 x) => new Line(A, x);
	}
	[StructLayout(LayoutKind.Sequential, Pack=4)]
	public readonly partial struct Triangle : IEquatable< Triangle >
	{ 
		public readonly Vector3 A;
		public readonly Vector3 B;
		public readonly Vector3 C;
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public Triangle(Vector3 a, Vector3 b, Vector3 c) { A = a; B = b; C = c; }
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public override bool Equals(object obj) => obj is Triangle x && Equals(x);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public override int GetHashCode() => Hash.Combine(A.GetHashCode(), B.GetHashCode(), C.GetHashCode());
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public override string ToString() => $"Triangle(A = {A}, B = {B}, C = {C})";
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public bool Equals(Triangle x) => A == x.A && B == x.B && C == x.C;
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static bool operator ==(Triangle x0, Triangle x1) => x0.Equals(x1);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static bool operator !=(Triangle x0, Triangle x1) => !x0.Equals(x1);
		public static Triangle Zero = new Triangle(default, default, default);
		public static Triangle MinValue = new Triangle(Vector3.MinValue, Vector3.MinValue, Vector3.MinValue);
		public static Triangle MaxValue = new Triangle(Vector3.MaxValue, Vector3.MaxValue, Vector3.MaxValue);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public Triangle SetA(Vector3 x) => new Triangle(x, B, C);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public Triangle SetB(Vector3 x) => new Triangle(A, x, C);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public Triangle SetC(Vector3 x) => new Triangle(A, B, x);
	}
	[StructLayout(LayoutKind.Sequential, Pack=4)]
	public readonly partial struct Triangle2 : IEquatable< Triangle2 >
	{ 
		public readonly Vector2 A;
		public readonly Vector2 B;
		public readonly Vector2 C;
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public Triangle2(Vector2 a, Vector2 b, Vector2 c) { A = a; B = b; C = c; }
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public override bool Equals(object obj) => obj is Triangle2 x && Equals(x);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public override int GetHashCode() => Hash.Combine(A.GetHashCode(), B.GetHashCode(), C.GetHashCode());
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public override string ToString() => $"Triangle2(A = {A}, B = {B}, C = {C})";
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public bool Equals(Triangle2 x) => A == x.A && B == x.B && C == x.C;
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static bool operator ==(Triangle2 x0, Triangle2 x1) => x0.Equals(x1);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static bool operator !=(Triangle2 x0, Triangle2 x1) => !x0.Equals(x1);
		public static Triangle2 Zero = new Triangle2(default, default, default);
		public static Triangle2 MinValue = new Triangle2(Vector2.MinValue, Vector2.MinValue, Vector2.MinValue);
		public static Triangle2 MaxValue = new Triangle2(Vector2.MaxValue, Vector2.MaxValue, Vector2.MaxValue);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public Triangle2 SetA(Vector2 x) => new Triangle2(x, B, C);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public Triangle2 SetB(Vector2 x) => new Triangle2(A, x, C);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public Triangle2 SetC(Vector2 x) => new Triangle2(A, B, x);
	}
	[StructLayout(LayoutKind.Sequential, Pack=4)]
	public readonly partial struct Quad : IEquatable< Quad >
	{ 
		public readonly Vector3 A;
		public readonly Vector3 B;
		public readonly Vector3 C;
		public readonly Vector3 D;
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public Quad(Vector3 a, Vector3 b, Vector3 c, Vector3 d) { A = a; B = b; C = c; D = d; }
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public override bool Equals(object obj) => obj is Quad x && Equals(x);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public override int GetHashCode() => Hash.Combine(A.GetHashCode(), B.GetHashCode(), C.GetHashCode(), D.GetHashCode());
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public override string ToString() => $"Quad(A = {A}, B = {B}, C = {C}, D = {D})";
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public bool Equals(Quad x) => A == x.A && B == x.B && C == x.C && D == x.D;
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static bool operator ==(Quad x0, Quad x1) => x0.Equals(x1);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static bool operator !=(Quad x0, Quad x1) => !x0.Equals(x1);
		public static Quad Zero = new Quad(default, default, default, default);
		public static Quad MinValue = new Quad(Vector3.MinValue, Vector3.MinValue, Vector3.MinValue, Vector3.MinValue);
		public static Quad MaxValue = new Quad(Vector3.MaxValue, Vector3.MaxValue, Vector3.MaxValue, Vector3.MaxValue);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public Quad SetA(Vector3 x) => new Quad(x, B, C, D);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public Quad SetB(Vector3 x) => new Quad(A, x, C, D);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public Quad SetC(Vector3 x) => new Quad(A, B, x, D);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public Quad SetD(Vector3 x) => new Quad(A, B, C, x);
	}
	[StructLayout(LayoutKind.Sequential, Pack=4)]
	public readonly partial struct Int2 : IEquatable< Int2 >
	{ 
		public readonly int A;
		public readonly int B;
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public Int2(int a, int b) { A = a; B = b; }
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public override bool Equals(object obj) => obj is Int2 x && Equals(x);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public override int GetHashCode() => Hash.Combine(A.GetHashCode(), B.GetHashCode());
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public override string ToString() => $"Int2(A = {A}, B = {B})";
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public bool Equals(Int2 x) => A == x.A && B == x.B;
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static bool operator ==(Int2 x0, Int2 x1) => x0.Equals(x1);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static bool operator !=(Int2 x0, Int2 x1) => !x0.Equals(x1);
		public static Int2 Zero = new Int2(default, default);
		public static Int2 MinValue = new Int2(int.MinValue, int.MinValue);
		public static Int2 MaxValue = new Int2(int.MaxValue, int.MaxValue);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public Int2 SetA(int x) => new Int2(x, B);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public Int2 SetB(int x) => new Int2(A, x);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static Int2 operator +(Int2 value1, Int2 value2) => new Int2(value1.A + value2.A,value1.B + value2.B);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static Int2 operator +(Int2 value1, int value2) => new Int2(value1.A + value2,value1.B + value2);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static Int2 operator +(int value1, Int2 value2) => new Int2(value1 + value2.A,value1 + value2.B);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static Int2 operator -(Int2 value1, Int2 value2) => new Int2(value1.A - value2.A,value1.B - value2.B);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static Int2 operator -(Int2 value1, int value2) => new Int2(value1.A - value2,value1.B - value2);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static Int2 operator -(int value1, Int2 value2) => new Int2(value1 - value2.A,value1 - value2.B);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static Int2 operator *(Int2 value1, Int2 value2) => new Int2(value1.A * value2.A,value1.B * value2.B);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static Int2 operator *(Int2 value1, int value2) => new Int2(value1.A * value2,value1.B * value2);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static Int2 operator *(int value1, Int2 value2) => new Int2(value1 * value2.A,value1 * value2.B);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static Int2 operator /(Int2 value1, Int2 value2) => new Int2(value1.A / value2.A,value1.B / value2.B);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static Int2 operator /(Int2 value1, int value2) => new Int2(value1.A / value2,value1.B / value2);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static Int2 operator /(int value1, Int2 value2) => new Int2(value1 / value2.A,value1 / value2.B);
		public static Int2 One = new Int2(1);
		public static Int2 UnitA = Zero.SetA(1);
		public static Int2 UnitB = Zero.SetB(1);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public Int2(int value) : this(value, value) { }		
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static Int2 operator -(Int2 value) => Zero - value;
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static int Dot(Int2 value1, Int2 value2) => value1.A * value2.A + value1.B * value2.B;
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public int Dot(Int2 value) => Int2.Dot(this, value);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public bool AlmostZero(float tolerance = Constants.Tolerance) => A.Abs() < tolerance && B.Abs() < tolerance;	
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public bool AlmostEquals(Int2 value, float tolerance = Constants.Tolerance) => (this - value).AlmostZero(tolerance);	
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public bool IsNaN() => A.IsNaN() || B.IsNaN();
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public int MinComponent() => (A).Min(B);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public int MaxComponent() => (A).Max(B);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public int SumComponents() => (A) + (B);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public int SumSqrComponents() => (A).Sqr() + (B).Sqr();
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public int ProductComponents() => (A) * (B);
	}
	[StructLayout(LayoutKind.Sequential, Pack=4)]
	public readonly partial struct Int3 : IEquatable< Int3 >
	{ 
		public readonly int A;
		public readonly int B;
		public readonly int C;
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public Int3(int a, int b, int c) { A = a; B = b; C = c; }
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public override bool Equals(object obj) => obj is Int3 x && Equals(x);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public override int GetHashCode() => Hash.Combine(A.GetHashCode(), B.GetHashCode(), C.GetHashCode());
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public override string ToString() => $"Int3(A = {A}, B = {B}, C = {C})";
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public bool Equals(Int3 x) => A == x.A && B == x.B && C == x.C;
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static bool operator ==(Int3 x0, Int3 x1) => x0.Equals(x1);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static bool operator !=(Int3 x0, Int3 x1) => !x0.Equals(x1);
		public static Int3 Zero = new Int3(default, default, default);
		public static Int3 MinValue = new Int3(int.MinValue, int.MinValue, int.MinValue);
		public static Int3 MaxValue = new Int3(int.MaxValue, int.MaxValue, int.MaxValue);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public Int3 SetA(int x) => new Int3(x, B, C);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public Int3 SetB(int x) => new Int3(A, x, C);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public Int3 SetC(int x) => new Int3(A, B, x);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static Int3 operator +(Int3 value1, Int3 value2) => new Int3(value1.A + value2.A,value1.B + value2.B,value1.C + value2.C);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static Int3 operator +(Int3 value1, int value2) => new Int3(value1.A + value2,value1.B + value2,value1.C + value2);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static Int3 operator +(int value1, Int3 value2) => new Int3(value1 + value2.A,value1 + value2.B,value1 + value2.C);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static Int3 operator -(Int3 value1, Int3 value2) => new Int3(value1.A - value2.A,value1.B - value2.B,value1.C - value2.C);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static Int3 operator -(Int3 value1, int value2) => new Int3(value1.A - value2,value1.B - value2,value1.C - value2);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static Int3 operator -(int value1, Int3 value2) => new Int3(value1 - value2.A,value1 - value2.B,value1 - value2.C);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static Int3 operator *(Int3 value1, Int3 value2) => new Int3(value1.A * value2.A,value1.B * value2.B,value1.C * value2.C);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static Int3 operator *(Int3 value1, int value2) => new Int3(value1.A * value2,value1.B * value2,value1.C * value2);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static Int3 operator *(int value1, Int3 value2) => new Int3(value1 * value2.A,value1 * value2.B,value1 * value2.C);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static Int3 operator /(Int3 value1, Int3 value2) => new Int3(value1.A / value2.A,value1.B / value2.B,value1.C / value2.C);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static Int3 operator /(Int3 value1, int value2) => new Int3(value1.A / value2,value1.B / value2,value1.C / value2);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static Int3 operator /(int value1, Int3 value2) => new Int3(value1 / value2.A,value1 / value2.B,value1 / value2.C);
		public static Int3 One = new Int3(1);
		public static Int3 UnitA = Zero.SetA(1);
		public static Int3 UnitB = Zero.SetB(1);
		public static Int3 UnitC = Zero.SetC(1);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public Int3(int value) : this(value, value, value) { }		
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static Int3 operator -(Int3 value) => Zero - value;
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static int Dot(Int3 value1, Int3 value2) => value1.A * value2.A + value1.B * value2.B + value1.C * value2.C;
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public int Dot(Int3 value) => Int3.Dot(this, value);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public bool AlmostZero(float tolerance = Constants.Tolerance) => A.Abs() < tolerance && B.Abs() < tolerance && C.Abs() < tolerance;	
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public bool AlmostEquals(Int3 value, float tolerance = Constants.Tolerance) => (this - value).AlmostZero(tolerance);	
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public bool IsNaN() => A.IsNaN() || B.IsNaN() || C.IsNaN();
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public int MinComponent() => (A).Min(B).Min(C);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public int MaxComponent() => (A).Max(B).Max(C);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public int SumComponents() => (A) + (B) + (C);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public int SumSqrComponents() => (A).Sqr() + (B).Sqr() + (C).Sqr();
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public int ProductComponents() => (A) * (B) * (C);
	}
	[StructLayout(LayoutKind.Sequential, Pack=4)]
	public readonly partial struct Int4 : IEquatable< Int4 >
	{ 
		public readonly int A;
		public readonly int B;
		public readonly int C;
		public readonly int D;
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public Int4(int a, int b, int c, int d) { A = a; B = b; C = c; D = d; }
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public override bool Equals(object obj) => obj is Int4 x && Equals(x);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public override int GetHashCode() => Hash.Combine(A.GetHashCode(), B.GetHashCode(), C.GetHashCode(), D.GetHashCode());
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public override string ToString() => $"Int4(A = {A}, B = {B}, C = {C}, D = {D})";
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public bool Equals(Int4 x) => A == x.A && B == x.B && C == x.C && D == x.D;
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static bool operator ==(Int4 x0, Int4 x1) => x0.Equals(x1);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static bool operator !=(Int4 x0, Int4 x1) => !x0.Equals(x1);
		public static Int4 Zero = new Int4(default, default, default, default);
		public static Int4 MinValue = new Int4(int.MinValue, int.MinValue, int.MinValue, int.MinValue);
		public static Int4 MaxValue = new Int4(int.MaxValue, int.MaxValue, int.MaxValue, int.MaxValue);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public Int4 SetA(int x) => new Int4(x, B, C, D);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public Int4 SetB(int x) => new Int4(A, x, C, D);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public Int4 SetC(int x) => new Int4(A, B, x, D);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public Int4 SetD(int x) => new Int4(A, B, C, x);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static Int4 operator +(Int4 value1, Int4 value2) => new Int4(value1.A + value2.A,value1.B + value2.B,value1.C + value2.C,value1.D + value2.D);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static Int4 operator +(Int4 value1, int value2) => new Int4(value1.A + value2,value1.B + value2,value1.C + value2,value1.D + value2);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static Int4 operator +(int value1, Int4 value2) => new Int4(value1 + value2.A,value1 + value2.B,value1 + value2.C,value1 + value2.D);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static Int4 operator -(Int4 value1, Int4 value2) => new Int4(value1.A - value2.A,value1.B - value2.B,value1.C - value2.C,value1.D - value2.D);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static Int4 operator -(Int4 value1, int value2) => new Int4(value1.A - value2,value1.B - value2,value1.C - value2,value1.D - value2);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static Int4 operator -(int value1, Int4 value2) => new Int4(value1 - value2.A,value1 - value2.B,value1 - value2.C,value1 - value2.D);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static Int4 operator *(Int4 value1, Int4 value2) => new Int4(value1.A * value2.A,value1.B * value2.B,value1.C * value2.C,value1.D * value2.D);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static Int4 operator *(Int4 value1, int value2) => new Int4(value1.A * value2,value1.B * value2,value1.C * value2,value1.D * value2);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static Int4 operator *(int value1, Int4 value2) => new Int4(value1 * value2.A,value1 * value2.B,value1 * value2.C,value1 * value2.D);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static Int4 operator /(Int4 value1, Int4 value2) => new Int4(value1.A / value2.A,value1.B / value2.B,value1.C / value2.C,value1.D / value2.D);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static Int4 operator /(Int4 value1, int value2) => new Int4(value1.A / value2,value1.B / value2,value1.C / value2,value1.D / value2);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static Int4 operator /(int value1, Int4 value2) => new Int4(value1 / value2.A,value1 / value2.B,value1 / value2.C,value1 / value2.D);
		public static Int4 One = new Int4(1);
		public static Int4 UnitA = Zero.SetA(1);
		public static Int4 UnitB = Zero.SetB(1);
		public static Int4 UnitC = Zero.SetC(1);
		public static Int4 UnitD = Zero.SetD(1);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public Int4(int value) : this(value, value, value, value) { }		
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static Int4 operator -(Int4 value) => Zero - value;
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public static int Dot(Int4 value1, Int4 value2) => value1.A * value2.A + value1.B * value2.B + value1.C * value2.C + value1.D * value2.D;
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public int Dot(Int4 value) => Int4.Dot(this, value);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public bool AlmostZero(float tolerance = Constants.Tolerance) => A.Abs() < tolerance && B.Abs() < tolerance && C.Abs() < tolerance && D.Abs() < tolerance;	
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public bool AlmostEquals(Int4 value, float tolerance = Constants.Tolerance) => (this - value).AlmostZero(tolerance);	
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public bool IsNaN() => A.IsNaN() || B.IsNaN() || C.IsNaN() || D.IsNaN();
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public int MinComponent() => (A).Min(B).Min(C).Min(D);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public int MaxComponent() => (A).Max(B).Max(C).Max(D);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public int SumComponents() => (A) + (B) + (C) + (D);
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public int SumSqrComponents() => (A).Sqr() + (B).Sqr() + (C).Sqr() + (D).Sqr();
		[MethodImpl(MethodImplOptions.AggressiveInlining)] public int ProductComponents() => (A) * (B) * (C) * (D);
	}
}